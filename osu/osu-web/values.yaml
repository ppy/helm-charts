# Default values for osu-web-chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

global:
  chartName: osu-web

config:
  laravel:
    url: https://osu.ppy.sh # APP_URL
    env: production # APP_ENV
    debug: false # APP_DEBUG
    trustedProxies: 0.0.0.0/0,::/0 # TRUSTED_PROXIES
    devDeploy: true # IS_DEVELOPMENT_DEPLOY
    # appKey: "" # APP_KEY, required, see README
    extraEnv: {}

    octane:
      replicas: 1
      # workers: 0 # set to cpu cores count by default
      maxRequests: 100
      extraArgs: [] # extra arguments to pass to octane, see `/app/artisan octane:start --help`
      extraPodAnnotations: {}
      extraVolumes: []
      extraVolumeMounts: []
      extraContainers: []
      livenessProbe:
        probeType: httpGet
        httpGet:
          path: /home
          port: http
      readinessProbe:
        probeType: httpGet
        httpGet:
          path: /home
          port: http
      # startupProbe: {}
      resources: {}
      nodeSelector: {}
      tolerations: []
      affinity: {}
      topologySpreadConstraints: []
      service:
        type: ClusterIP
        port: 80
        annotations: {}
      ingress:
        enabled: true
        className: ""
        annotations: {}
          # kubernetes.io/ingress.class: nginx
        # kubernetes.io/tls-acme: "true"
        hosts:
          - host: REPLACE_BY_APP_URL
            # paths are defined separately, so they can be separately overridden
        tls: []
        #  - secretName: chart-example-tls
        #    hosts:
        #      - chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
      podDisruptionBudget:
        enabled: true
        # minAvailable: 1
        maxUnavailable: 1

      # any of the above property can be overridden for each pool
      pools:
        general:
          enabled: true
          suffix: "" # if unspecified is `-{{ $poolName }}`. empty string removes the suffix
          paths:
            - path: /
              pathType: ImplementationSpecific

    sentry: {}
      # url: "" # APP_SENTRY
      # publicUrl: "" # APP_SENTRY_PUBLIC
      # tracesSampleRate: "" # SENTRY_TRACES_SAMPLE_RATE
      # environment: "" # APP_SENTRY_ENVIRONMENT

    log:
      driver: redis # BROADCAST_DRIVER
    logChannel: stderr # LOG_CHANNEL

    cache:
      driver: redis # CACHE_DRIVER
      # localDriver: file # CACHE_DRIVER_LOCAL

    session:
      driver: redis # SESSION_DRIVER
      # domain: "" # SESSION_DOMAIN
      # secureCookie: false # SESSION_SECURE_COOKIE
      # prefix: "" # SESSION_PREFIX

    legacy: {}
      # sharedInteropDomain: "" # SHARED_IO_DOMAIN
      # sharedInteropSecret: "" # SHARED_INTEROP_SECRET
      # banchoBotUserId: "" # BANCHO_BOT_USER_ID

    queue:
      driver: redis # QUEUE_DRIVER
      workers:
        general:
          enabled: true
          replicas: 1
          queues:
            - beatmap_default
            - beatmap_high
            - default
            - notification
            - store-notifications
          # additionalOptions: []
          # resources: {}

    schedule:
      enabled: true
      cron: "* * * * *"
      concurrencyPolicy: Allow
      # additionalOptions: []
      # resources: {}

    camo: {}
      # key: "" # CAMO_KEY
      # prefix: "" # CAMO_PREFIX

    oauth:
      publicKey: ""
      privateKey: ""

    # githubToken: "" # GITHUB_TOKEN
    # changelogGithubToken: "" # CHANGELOG_GITHUB_TOKEN

    datadog:
      # enabled: true # DATADOG_ENABLED
      # prefix: osu.web # DATADOG_PREFIX
      # apiKey: "" # DATADOG_API_KEY
      # appKey: "" # DATADOG_APP_KEY
      # host: https://app.datadoghq.com # DATADOG_HOST
      statsd: {}
        # host: localhost # DATADOG_STATSD_HOST
        # port: 8125 # DATADOG_STATSD_PORT
        # socket: "" # DATADOG_STATSD_SOCKET

    payments:
      sandbox: true # PAYMENT_SANDBOX
      storeStaleDays: "" # STORE_STALE_DAYS
      shopify:
        domain: "" # SHOPIFY_DOMAIN
        storeFrontToken: "" # SHOPIFY_STOREFRONT_TOKEN
        webhookKey: "" # SHOPIFY_WEBHOOK_KEY
      paypal:
        url: https://www.sandbox.paypal.com/cgi-bin/webscr # PAYPAL_URL
        merchantId: "" # PAYPAL_MERCHANT_ID
        clientId: "" # PAYPAL_CLIENT_ID
        clientSecret: "" # PAYPAL_CLIENT_SECRET
        noShippingExperienceProfileId: "" # PAYPAL_NO_SHIPPING_EXPERIENCE_PROFILE_ID
      xsolla:
        apiKey: "" # XSOLLA_API_KEY
        merchantId: "" # XSOLLA_MERCHANT_ID
        projectId: "" # XSOLLA_PROJECT_ID
        secretKey: "" # XSOLLA_SECRET_KEY
      centili:
        # enabled: false # CENTILI_ENABLED
        apiKey: "" # CENTILI_API_KEY
        secretKey: "" # CENTILI_SECRET_KEY
        conversionRate: "" # CENTILI_CONVERSION_RATE
        widgetUrl: https://api.centili.com/payment/widget # CENTILI_WIDGET_URL

    notifications:
      queue: notification # NOTIFICATION_QUEUE
      store:
        channel: test # STORE_NOTIFICATION_CHANNEL
        queue: store-notifications # STORE_NOTIFICATIONS_QUEUE

    recaptcha:
      secret: "" # RECAPTCHA_SECRET
      siteKey: "" # RECAPTCHA_SITEKEY
      threshold: "" # RECAPTCHA_THRESHOLD

    twitch:
      clientId: "" # TWITCH_CLIENT_ID
      clientSecret: "" # TWITCH_CLIENT_SECRET

    scores:
      cacheDuration: "" # SCORES_ES_CACHE_DURATION

    scoresRankCache:
      localServer: 0 # SCORES_RANK_CACHE_LOCAL_SERVER
      minUsers: 35000 # SCORES_RANK_CACHE_MIN_USERS
      serverUrl: "" # SCORES_RANK_CACHE_SERVER_URL
      timeout: 10 # SCORES_RANK_CACHE_TIMEOUT

  clientCheckVersion: false

  spectatorServer: {}
    # env: Development # ASPNETCORE_ENVIRONMENT

  db:
    # host: localhost # DB_HOST
    database: osu # DB_DATABASE
    username: osuweb # DB_USERNAME
    password: "" # DB_PASSWORD

  upgradeJob: # Post-install & Pre-upgrade hook
    enabled: true
    # podAnnotations: {}
    # resources: {}
    migrate: true
    insertOsuWebBuild:
      enabled: false
      streamId: 8

  seedingJob: # Post-install hook
    enabled: true
    apiKey: ""

  dbName: {}
    # chat: "" # defaults to osu_chat

  redis:
    app:
      # host: 127.0.0.1 # REDIS_HOST
      port: 6379 # REDIS_PORT
      db: 0 # REDIS_DB
    cache:
      # host: 127.0.0.1 # CACHE_REDIS_HOST
      port: 6379 # CACHE_REDIS_PORT
      db: 0 # CACHE_REDIS_DB
    notification:
      # host: 127.0.0.1 # NOTIFICATION_REDIS_HOST
      port: 6379 # NOTIFICATION_REDIS_PORT
      db: 0 # NOTIFICATION_REDIS_DB

  memcache: {}
    # persistentId: "" # MEMCACHED_PERSISTENT_ID
    # username: "" # MEMCACHED_USERNAME
    # password: "" # MEMCACHED_PASSWORD
    # host: 127.0.0.1 # MEMCACHED_HOST
    # port: 11211 # MEMCACHED_PORT

  mail: {}
    # driver: log # MAIL_DRIVER
    # host: "" # MAIL_HOST
    # port: "" # MAIL_PORT
    # encryption: "" # MAIL_ENCRYPTION
    # username: "" # MAIL_USERNAME
    # password: "" # MAIL_PASSWORD

  beatmapsProcessor: {}
    # mirrors: 1 # BM_PROCESSOR_MIRRORS
    # thumbnailer: http://localhost:4001 # BM_PROCESSOR_THUMBNAILER
    # sentry: "" # BM_PROCESSOR_SENTRY

  storage:
    general:
      driver: local # FILESYSTEM_DISK
      local:
        # storageClassName:
        # volumeName:
        accessModes:
          - ReadWriteOnce # if total octane pods > 1, must use ReadWriteMany or S3 driver unless running on a single node
        size: 1Gi
      s3:
        key: "" # S3_KEY
        secret: "" # S3_SECRET
        region: "" # S3_REGION
        bucket: "" # S3_BUCKET
        baseUrl: "" # S3_BASE_URL
        miniUrl: "" # S3_MINI_URL
    avatar:
      driver: local-avatar # AVATAR_STORAGE
      local:
        # storageClassName:
        # volumeName:
        accessModes:
          - ReadWriteOnce # if total octane pods > 1, must use ReadWriteMany or S3 driver unless running on a single node
        size: 1Gi
      s3:
        key: "" # S3_AVATAR_KEY
        secret: "" # S3_AVATAR_SECRET
        region: "" # S3_AVATAR_REGION
        bucket: "" # S3_AVATAR_BUCKET
        baseUrl: "" # S3_AVATAR_BASE_URL
        cachePurgePrefix: "" # AVATAR_CACHE_PURGE_PREFIX
        cachePurgeMethod: "" # AVATAR_CACHE_PURGE_METHOD
        cachePurgeAuthorizationKey: "" # AVATAR_CACHE_PURGE_AUTHORIZATION_KEY
    replay:
      driver: local # SCORE_REPLAYS_STORAGE
      local:
        # storageClassName:
        # volumeName:
        accessModes:
          - ReadWriteOnce # if total octane pods > 1, must use ReadWriteMany or S3 driver unless running on a single node
        size: 1Gi
      # s3 uses same settings than general storage, however bucket name is hardcoded to `replay-${mode}` (osu, taiko, fruits, mania)

    # used by osu-server-beatmap-submission
    beatmaps:
      driver: local
      mountedWeb: false
      local:
        # storageClassName:
        # volumeName:
        accessModes:
          - ReadWriteOnce # if total octane pods > 1, must use ReadWriteMany or S3 driver unless running on a single node
        size: 1Gi
      s3:
        key: "" # S3_ACCESS_KEY
        secret: "" # S3_SECRET_KEY
        centralBucketName: "" # S3_CENTRAL_BUCKET_NAME
        centralBucketRegion: "" # S3_CENTRAL_BUCKET_REGION
        beatmapsBucketName: "" # S3_BEATMAPS_BUCKET_NAME
        beatmapsBucketRegion: "" # S3_BEATMAPS_BUCKET_REGION

  elasticsearch:
    # host: localhost:9200 # ES_HOST
    scores: {}
      # host: localhost:9200 # ES_SCORES_HOST
    soloScores: {}
      # host: localhost:9200 # ES_SOLO_SCORES_HOST
    # indexPrefix: "" # ES_INDEX_PREFIX
    # clientTimeout: 5 # ES_CLIENT_TIMEOUT
    # clientConnectTimeout: 0.5 # ES_CLIENT_CONNECT_TIMEOUT
    # searchTimeout: 5s # ES_SEARCH_TIMEOUT

  notificationServer: {}
    # publicUrl: /home/notifications/feed # NOTIFICATION_ENDPOINT

  beatmapsDifficultyLookupCache: {}
    # serverUrl: "" # BEATMAPS_DIFFICULTY_CACHE_SERVER_URL

image:
  repository: pppy/osu-web
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  # tag: ""

osu-beatmap-difficulty-lookup-cache:
  enabled: true
  useSharedSecretsFromOsuWebChart: true
  config:
    beatmapDifficultyLookupCache: {}
      # useDatabaseLookups: false

osu-notification-server:
  enabled: true
  useSharedSecretsFromOsuWebChart: true

osu-server-spectator:
  enabled: true
  useSharedSecretsFromOsuWebChart: true

osu-elastic-indexer:
  enabled: true
  useSharedSecretsFromOsuWebChart: true
  config:
    elasticIndexer:
      schema: 1

osu-queue-score-statistics:
  enabled: true
  useSharedSecretsFromOsuWebChart: true
  config:
    queueScoreStatistics:
      schema: 1

osu-server-beatmap-submission:
  enabled: true
  useSharedSecretsFromOsuWebChart: true

scthumber:
  enabled: true

mysql:
  enabled: true
  architecture: standalone

  auth:
    rootPassword: changeme # required, recommended to use a random string
    forcePassword: false

    # default db, username and password are unused and deleted in initDbScripts.
    database: ""
    username: defaultuser
    password: defaultpw

  initdbScripts:
    00-remove-default-user.sql: |
      DROP USER defaultuser;
    01-init-osu.sql: |
      CREATE DATABASE osu DEFAULT CHARSET utf8mb4;
      CREATE DATABASE osu_store DEFAULT CHARSET utf8mb4;
      CREATE DATABASE osu_mp DEFAULT CHARSET utf8mb4;
      CREATE DATABASE osu_chat DEFAULT CHARSET utf8mb4;
      CREATE DATABASE osu_charts DEFAULT CHARSET utf8mb4;
      CREATE DATABASE osu_updates DEFAULT CHARSET utf8mb4;

      CREATE USER 'osuweb'@'%' IDENTIFIED BY '';
      GRANT ALL PRIVILEGES ON *.* TO 'osuweb'@'%' WITH GRANT OPTION;

      FLUSH PRIVILEGES;

redis:
  enabled: true
  architecture: standalone
  auth:
    enabled: false

elasticsearch:
  enabled: true
  clusterName: osu-web-elasticsearch # must be unique inside namespace!
  extraEnvs:
  - name: action.auto_create_index
    value: "false"
  - name: ES_JAVA_OPTS
    value: "-Xms512m -Xmx512m"
  replicas: 1
  maxUnavailable: 0

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podSecurityContext:
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000

securityContext:
  runAsUser: 1000
  runAsGroup: 1000

ingress:
  enabled: true
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: REPLACE_BY_APP_URL
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

assets:
  replicas: 1
  podAnnotations: {}
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  topologySpreadConstraints: []
  livenessProbe:
    probeType: httpGet
    httpGet:
      path: /site.webmanifest
      port: http
  readinessProbe:
    probeType: httpGet
    httpGet:
      path: /site.webmanifest
      port: http
  # startupProbe: {}
  service:
    type: ClusterIP
    port: 80
    annotations: {}
  ingress:
    enabled: true
    className: ""
    annotations:
      nginx.ingress.kubernetes.io/use-regex: "true"
      nginx.ingress.kubernetes.io/configuration-snippet: |
        rewrite ^/docs$ /docs/ permanent; # 301 redirect as assets are referenced by relative path
        rewrite ^/docs/$ /docs/index.html;
    hosts:
      - host: REPLACE_BY_APP_URL
        paths:
          - path: /(assets/|images/|docs|favicon\.ico$|site\.webmanifest$)
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  podDisruptionBudget:
    enabled: true
    # minAvailable: 1
    maxUnavailable: 1
  upgradeJob:
    enabled: true
    image: bitnami/kubectl:1.26
    imagePullPolicy: IfNotPresent
    resources:
      requests:
        cpu: 10m
        memory: 64Mi
      limits:
        memory: 128Mi
    podSecurityContext:
      runAsUser: 1001
      runAsGroup: 1001
      fsGroup: 1001
    securityContext:
      runAsUser: 1001
      runAsGroup: 1001
